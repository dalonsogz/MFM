package com.github.phweda.mfm.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.RowSorterEvent;
import javax.swing.event.RowSorterListener;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MachineListForm {
  private JPanel pnlMachineListView;
  private JTextField txtSearch;
  private JPanel pnlSearch;
  private JScrollPane scpPane;
  private JTable machineListTable;
  private TableRowSorter<MachineListTableModel> mltms;

  public MachineListForm() {
    $$$setupUI$$$();
    txtSearch.getDocument().addDocumentListener(new DocumentListener() {
      public void changedUpdate(DocumentEvent e) {
        handleFilter();
      }

      public void removeUpdate(DocumentEvent e) {
        handleFilter();
      }

      public void insertUpdate(DocumentEvent e) {
        handleFilter();
      }

      public void handleFilter() {
        DefaultRowSorter sorter = (DefaultRowSorter) machineListTable.getRowSorter();
        sorter.setRowFilter(new RowFilter() {
          @Override
          public boolean include(Entry entry) {
            String value = (String) entry.getValue(0);
            return value.toLowerCase().contains(txtSearch.getText().toLowerCase());
          }
        });
      }
    });
  }

  public JPanel getPnlMachineListView() {
    return pnlMachineListView;
  }

  private void createUIComponents() {
    machineListTable = MachineListTable.getInstance();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    pnlMachineListView = new JPanel();
    pnlMachineListView.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    pnlSearch = new JPanel();
    pnlSearch.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    pnlMachineListView.add(pnlSearch, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    txtSearch = new JTextField();
    pnlSearch.add(txtSearch, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("Filter");
    pnlSearch.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    scpPane = new JScrollPane();
    pnlMachineListView.add(scpPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    scpPane.setViewportView(machineListTable);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return pnlMachineListView;
  }

}
