package com.github.phweda.mfm.ui.component;

import com.github.phweda.mfm.ui.component.validation.UiMessageSeverity;
import com.github.phweda.mfm.ui.component.validation.ValidationBase;
import com.github.phweda.mfm.ui.component.validation.ValidationResult;
import com.github.phweda.utils.StringUtils;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

/**
 * Validated File System Path selector input box
 */
public class ValidatedFSPathInputBox {
  private JTextField txtPath;
  private JButton btnBrowse;
  private JLabel lblInfo;
  private JLabel lblFieldName;
  private JPanel panelComponentHolder;
  private JPanel panelSelectorControls;
  private ValidationBase validationBase;
  private SelectionMode selectionMode = SelectionMode.DIRECTORIES_ONLY;
  private JFileChooser fileChooser = null;
  private boolean optional = true;

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panelComponentHolder = new JPanel();
    panelComponentHolder.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    panelComponentHolder.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(2, 2, 2, 2), null));
    final Spacer spacer1 = new Spacer();
    panelComponentHolder.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    panelSelectorControls = new JPanel();
    panelSelectorControls.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
    panelComponentHolder.add(panelSelectorControls, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    lblFieldName = new JLabel();
    lblFieldName.setText("");
    panelSelectorControls.add(lblFieldName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(130, -1), new Dimension(130, -1), null, 0, false));
    txtPath = new JTextField();
    panelSelectorControls.add(txtPath, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    btnBrowse = new JButton();
    btnBrowse.setText("Browse...");
    panelSelectorControls.add(btnBrowse, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    lblInfo = new JLabel();
    lblInfo.setIcon(new ImageIcon(getClass().getResource("/com/github/phweda/mfm/ui/i.png")));
    lblInfo.setText("");
    panelSelectorControls.add(lblInfo, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(24, 24), new Dimension(24, 24), new Dimension(24, 24), 0, false));
    validationBase = new ValidationBase();
    panelComponentHolder.add(validationBase.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panelComponentHolder;
  }


  public enum SelectionMode {
    FILES_ONLY,
    DIRECTORIES_ONLY
  }

  public ValidatedFSPathInputBox(String name, String info, boolean optional) {
    initControl(name, info, SelectionMode.DIRECTORIES_ONLY, optional);

  }

  public ValidatedFSPathInputBox(String name, String info, SelectionMode selectionMode, boolean optional) {
    initControl(name, info, selectionMode, optional);
  }

  private void initControl(String name, String info, SelectionMode selectionMode, boolean optional) {
    lblFieldName.setText(name);
    lblInfo.setToolTipText(info);
    this.selectionMode = selectionMode;
    this.optional = optional;
    this.validationBase.setPanelComponentHolder(panelComponentHolder);

    Font f = lblFieldName.getFont();
    if (!optional) {
      lblFieldName.setFont(f.deriveFont(f.getStyle() | Font.BOLD));
    } else {
      lblFieldName.setFont(f.deriveFont(f.getStyle() & ~Font.BOLD));
    }

    fileChooser = new JFileChooser();
    fileChooser.setPreferredSize(new Dimension(640, 480));
    btnBrowse.addActionListener(e -> {
      switch (selectionMode) {
        case FILES_ONLY:
          fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
          fileChooser.setDialogTitle("Select File");
          break;
        case DIRECTORIES_ONLY:
          fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          fileChooser.setDialogTitle("Select Folder");
          break;
        default:
          throw new RuntimeException("Unknown mode: " + selectionMode);
      }
      int returnValue = fileChooser.showDialog(ValidatedFSPathInputBox.this.panelComponentHolder, "Select");

      if (returnValue == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        txtPath.setText(file.getAbsolutePath());
      }
    });
  }


  /**
   * validate control
   *
   * @return true if control is valid (no error messages)
   */
  public boolean validate(ValidationResult validationResult) {
    this.clearMessage();
    String textFieldValue = getPath();
    //empty field
    if (StringUtils.safeIsEmpty(textFieldValue)) {
      if (!optional) {
        this.setMessage("This field is required", UiMessageSeverity.ERROR);
        return false;
      }
      return true;
    }

    File destFile = new File(textFieldValue);
    switch (selectionMode) {
      case FILES_ONLY:
        if (!destFile.isFile()) {
          this.setMessage("File isn't exists", UiMessageSeverity.ERROR);
          return false;
        }
        break;
      case DIRECTORIES_ONLY:
        if (!destFile.isDirectory()) {
          this.setMessage("Directory is not exists", UiMessageSeverity.ERROR);
          return false;
        }
        break;
      default:
        throw new RuntimeException("Unknown mode: " + selectionMode);
    }
    return true;
  }

  public boolean setMessage(String text, UiMessageSeverity messageSeverity) {
    return validationBase.setMessage(text, messageSeverity);
  }

  public void clearMessage() {
    validationBase.clearMessage();
  }

  public String getPath() {
    return txtPath.getText().trim();
  }

  public void setPath(String path) {
    txtPath.setText(path);
  }


}
